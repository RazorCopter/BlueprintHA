blueprint:
  name: Invia un istantanea IPCAM con attivazione RING/PIR
  author: Razor
  description: >
     ## üêò Questo progetto di automazione crea un istantanea della fotocamera quando il campanello si trova in stato attivato e invia una notifica al tuo telefono con snapshot.'
  domain: automation
  source_url: https://github.com/RazorCopter/blueprint
  input:
    condition:
      name: Aggiungi condizione(i) per invio snapshot
      description: Aggiungi le condizioni necessarie per inviare lo snapshot al dispositivo
      default: []
      selector:
        condition: {}
    conditionSave:
      name: Aggiungi condizione(i) per salvare Snapshot
      description: Aggiungi condizioni necessarie per salvare lo snapshot
      default: []
      selector:
        condition: {}
    sensor:
      name: Motion o Binary Sensor (RING Intercom)
      description: Sensore triggher per la generazione dello snapshot
      selector:
        entity:
          domain:
          - binary_sensor
          multiple: false
    camera:
      name: Camera
      description: Camera con cui fare lo snapshot
      selector:
        entity:
          domain:
          - camera
          multiple: false
    notify:
      name: Notifica al Dispositivo
      description: Notifica al dispositivo?
      default: true
      selector:
        boolean: {}
    notify_device:
      name: Dispositivo di notifica
      description: Per ricevere la notifica, il dispositivo deve eseguire l App ufficiale Home Assistant.
      selector:
        device:
          filter:
          - integration: mobile_app
          multiple: false
    is_ios:
      name: Usi un dispositivo iOS?
      description: Seleziona se il dispositivo selezionato esegue iOS (default Android).
      selector:
        boolean: {}
      default: false
    notification_title:
      name: Titolo Notifica (Opzionale)
      description: 'Default: "DingDong!"'
      default: Suona il campanello!
    notification_message:
      name: Messaggio notifica (Opzionale)
      description: 'Default: "Presenza {{ sensor_name }}! Snapshot ora: {{ time }}."'
      default: 'Presenza {{ sensor_name }}! Snapshot ora: {{ time }}.'
    delay:
      name: Ritardo (Opzionale)
      description: Attesa prima di creare lo snapshot
      default: 0
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    delay_notification:
      name: Ritardo notifica (Opzionale)
      description: Attendi prima di inviare un altra notifica.
      default: 0
      selector:
        duration: {}
    data_clickaction_url:
      name: URL di navigazione. (Opzionale)
      description: URL a cui accedere quando si fa clic sulla notifica.
      default: /lovelace/
      selector:
        text:
          multiple: false
          multiline: false
    file:
      name: File Path
      description: Il percorso del file in cui archiviare lo snapshot pi√π recente. CONSIGLIATO -
        Se lo desideri, modifica CAMERA_NAME in modo che corrisponda al nome della tua IPCamera, senza spazi!
      default: /media/CAMERA_NAME/last_motion.jpg
    archive_file:
      name: Archivio File Path
      description: Il percorso del file in cui archiviare lo snapshot pi√π recente. CONSIGLIATO -
        Se lo desideri, modifica CAMERA_NAME in modo che corrisponda al nome della tua IPCamera, senza spazi!
      default: /media/CAMERA_NAME/archive/motion_{{ now().strftime("%Y%m%d-%H%M%S")
        }}.jpg
    additional_actions:
      name: Azioni Addizionali
      description: "Aggiungi azioni ulteriori per lo script. Sar√† eseguito in coda a tutto.
        Utile per inviare un'altra notifica!\nVariables: sensor, sensor_name,
        camera, camera_name, notification_title, notification_message, time, date,
        etc...\n- Esempio: Per inviare al dispositivo mobile utilizzando HA ufficiale
        App:\n\n  Notifiche -> Invia notifica via mobile.YOUR_DEVICE_NAME\n
        \ ```\n  service: notify.YOUR_DEVICE_NAME\n  metadata: {}\n  data:\n    message:
        \"{{ notification_message }}\"\n    title: \"{{ notification_title }}\"\n
        \   data: '\n      {% set android_data = {\"image\": \"%s\", \"clickAction\":
        \"%s\"} | format(snapshot_access_file_path, clickActionURL) %}\n      {% set
        ios_data = {\"attachment\": {\"url\": \"%s\",\"content_type\": \"JPEG\"},\"url\":
        \"%s\"} | format(snapshot_access_file_path, clickActionURL) %} \n      {{
        ios_data if is_ios else android_data }}'\n  ```\n\n  Copy {{ notification_message
        }} into `message`. Questo passer√† a \"yaml\" mode. Copia interamente `data`
        blocca dall alto e sostituisci la voce a destra.\n  Sopra un esempio completo.\n"
      default: []
      selector:
        action: {}
    additional_actions_before:
      name: Azioni aggiuntive prima
      description: Aggiungi ulteriori azioni allo script. Verr√† eseguito prima dello scatto.
      Utile per accendere una luce prima della foto!
      default: []
      selector:
        action: {}
trigger:
- platform: state
  entity_id: !input sensor
  from: 'off'
  to: 'on'
variables:
  sensor: !input sensor
  sensor_name: '{{ states[sensor].name }}'
  camera: !input camera
  camera_name: '{{ states[camera].name }}'
  notify_device: !input notify_device
  is_ios: !input is_ios
  time: '{{ now().strftime("%H:%M") }}'
  date: '{{ now().strftime("%Y-%m-%d") }}'
  notification_title: !input notification_title
  notification_message: !input notification_message
  delay: !input delay
  delay_notification: !input delay_notification
  snapshot_create_file_path: /config/www/tmp/snapshot_{{ states[camera].object_id
    }}.jpg
  snapshot_access_file_path: '{{ snapshot_create_file_path | replace(''/config/www'',''/local'')
    }}'
  condition: !input condition
  conditionSave: !input conditionSave
  clickActionURL: !input data_clickaction_url
  file: !input file
  archive_file: !input archive_file
  additional_actions: !input additional_actions
  additional_actions_before: !input additional_actions_before
  notify: !input notify
action:
- if:
  - condition: !input condition
  then:
  - choose: []
    default: !input additional_actions_before
  - delay: !input delay
  - service: camera.snapshot
    entity_id: !input camera
    data:
      filename: '{{ snapshot_create_file_path }}'
  - if:
    - condition: template
      value_template: '{{ notify }}'
    then:
    - device_id: !input notify_device
      domain: mobile_app
      type: notify
      title: '{{ notification_title }}'
      message: '{{ notification_message }}'
      data: ' {% set android_data = { "image": "%s", "clickAction": "%s" } | format(snapshot_access_file_path,
        clickActionURL) %} {% set ios_data = { "attachment": { "url": "%s", "content_type":
        "JPEG" }, "url": "%s" } | format(snapshot_access_file_path, clickActionURL)
        %} {{ ios_data if is_ios else android_data }} '
  - choose: []
    default: !input additional_actions
- if:
  - condition: !input conditionSave
  then:
  - service: camera.snapshot
    entity_id: !input camera
    data:
      filename: !input file
  - service: camera.snapshot
    entity_id: !input camera
    data:
      filename: !input archive_file
  - delay: !input delay_notification
mode: single

