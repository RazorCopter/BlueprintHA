blueprint:
  name: Invia un istantanea IPCAM con attivazione RING
  author: Razor
  description: >
     Questo progetto di automazione crea un istantanea della fotocamera quando il campanello si trova in stato attivato e invia una notifica al tuo telefono con snapshot.'
     ## 🐘 Requisiti
     #### Creare una cartella nel path www di HA chiamata: cam_captures (qui verranno memorizzati gli snapshot)
  domain: automation
  input:
    binary_sensor:
      name: Sensore PIR o Binario
      description: >
        Entity che rappresenta un pulsante fisico (che ripristina la sua posizione
        quando rilasciato). Questa automazione viene attivata dal fronte di discesa.    
      selector:
        entity:
          domain: binary_sensor
          integration: mqtt
    camera:
      name: Camera
      description: Camera da cui creare lo snapshot
      selector:
        entity:
          domain: camera
    notify_device:
      name: Dispositivo di notifica
      description: Per ricevere la notifica, il dispositivo deve eseguire l'app ufficiale Home Assistant.
      default: []
      selector:
        device:
          filter:
          - integration: mobile_app
          multiple: true
    is_ios:
      name: Usi un dispositivo iOS?
      description: Seleziona se il dispositivo selezionato esegue iOS (default Android).
      selector:
        boolean: {}
      default: false
    notification_title:
      name: Titolo Notifica (Optionale)
      description: 'Default: "DingDong!"'
      default: Il Campanello è attivo!
    notification_message:
      name: Messaggio notifica (Optionale)
      description: 'Default: "{{ binary_sensor_name }} è stato attivato!"'
      default: '{{ binary_sensor_name }} è stato attivato!'
    delay:
      name: Ritardo (Optionale)
      description: Attesa prima di creare lo snapshot
      default: ''
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
  source_url: https://github.com/RazorCopter/blueprint
trigger:
  platform: state
  entity_id: !input 'binary_sensor'
  from: 'off'
  to: 'on'
variables:
  binary_sensor: !input 'binary_sensor'
  binary_sensor_name: '{{ states[binary_sensor].name }}'
  camera: !input 'camera'
  notify_device: !input 'notify_device'
  is_ios: !input 'is_ios'
  notification_title: !input 'notification_title'
  notification_message: !input 'notification_message'
  delay: !input 'delay'
  snapshot_create_file_path: /config/www/cam_captures/snapshot_{{ now().strftime("%Y%m%d-%H%M%S")
        }}.jpg
  snapshot_access_file_path: '{{ snapshot_create_file_path | replace(''/config/www'',''/local'')
    }}'
action:
- delay: '{{ delay }}'
- service: camera.snapshot
  entity_id: !input 'camera'
  data:
    filename: '{{ snapshot_create_file_path }}'
- device_id: !input 'notify_device'
  domain: mobile_app
  type: notify
  title: '{{ notification_title }}'
  message: '{{ notification_message }}'
  data: '{% set android_data = {"image": "%s"} | format(snapshot_access_file_path)
    %} {% set ios_data = {"attachment": {"url": "%s", "content_type": "JPEG"}} | format(snapshot_access_file_path)
    %} {{ ios_data if is_ios else android_data }}'
